apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-task
spec:
  params:
    - name: source_directory
    - name: registryUrl
      default: "us.icr.io"
    - name: registryNamespace
      default: olivier-images
    - name: registryRegion
      default: us-south
    - name: imageName
    - name: imageTag
    - name: extraDockerOpts
      default: '--no-cache'
  results:
    - name: APP_IMAGE_DIGEST
      description: The digest of the built image
    - name: APP_IMAGE_URL
      description: The url of the built image

  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: REGISTRY_API_KEY
  workspaces:
  - name: task-pvc
    mountPath: /workspace 
  steps:
  - name: build-base
    image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.40
    imagePullPolicy: IfNotPresent
    env:
      - name: HOME
        value: /root
      - name: SOURCE_DIRECTORY
        value: $(params.source_directory)
      - name: IMAGE_NAME
        value: $(params.imageName)
      - name: IMAGE_TAG
        value: $(params.imageTag)
      - name: REGISTRY_URL
        value: $(params.registryUrl)
      - name: REGISTRY_NAMESPACE
        value: $(params.registryNamespace)
      - name: REGISTRY_REGION
        value: $(params.registryRegion)
      - name: EXTRA_DOCKER_OPTS
        value: $(params.extraDockerOpts)
      - name: DOCKER_HOST
        value: "unix:///var/run/docker.sock"
    workingDir: /workspace
    volumeMounts:
      - mountPath: /var/run/
        name: dind-socket
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        cd "${SOURCE_DIRECTORY}"
        ibmcloud config --check-version=false
        ibmcloud plugin install -f container-registry
        ibmcloud login -a ${API} -r ${REGISTRY_REGION} --apikey ${API_KEY}
        ibmcloud cr login
        ibmcloud cr info

        echo -e "Build environment variables:"
        echo "REGISTRY_URL=${REGISTRY_URL}"
        echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}"
        echo "IMAGE_NAME=${IMAGE_NAME}"
        # echo "IMAGE_TAG=${IMAGE_TAG}"
      
        # TIMESTAMP=$(date +%Y%m%d%H%M%Z)
        echo "=========================================================="
        echo "Checking for Dockerfile at the root of ${SOURCE_DIRECTORY}"
        DOCKERFILE=Dockerfile
        echo "=========================================================="

        echo "Checking registry namespace: ${REGISTRY_NAMESPACE}"
        NS=$( ibmcloud cr namespaces | grep ${REGISTRY_NAMESPACE} ||: )
        if [ -z "${NS}" ]; then
            echo "Registry namespace ${REGISTRY_NAMESPACE} not found, creating it."
            ibmcloud cr namespace-add ${REGISTRY_NAMESPACE}
            echo "Registry namespace ${REGISTRY_NAMESPACE} created."
        else 
            echo "Registry namespace ${REGISTRY_NAMESPACE} found."
        fi
        echo "=========================================================="
        DOCKER_BUILDKIT=1 docker build -f ${DOCKERFILE} ${EXTRA_DOCKER_OPTS} -t ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME} .
        docker push ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}

        # Record task results
        # DIGEST=$(ic cr image-inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME} --format ''{{.ID}}'')
        docker inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}
        DIGEST=$(docker inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME} |  jq -r '.[].RepoDigests' | jq -r '.[]')
        DIGEST=$(echo $DIGEST | cut -d '@' -f2)
        echo "DIGEST=${DIGEST}"
        echo ${DIGEST} > $(results.APP_IMAGE_DIGEST.path)
        echo "IMAGE URL: ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}"
        echo -n "${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}" > $(results.APP_IMAGE_URL.path)
  sidecars:
    - image: docker:23.0.6-dind
      name: server
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      args:
      - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then 
          apk add e2fsprogs && 
          truncate -s 20G /tmp/disk.img && 
          mkfs.ext4 /tmp/disk.img && 
          mount /tmp/disk.img /var/lib/docker; fi &&
        dockerd-entrypoint.sh --mtu=1400 --host=unix:///var/run/docker.sock;
      volumeMounts:
        - mountPath: /var/run/
          name: dind-socket
      readinessProbe:
        initialDelaySeconds: 4
        periodSeconds: 1
        exec:
          command: ["docker", "stats", "--no-stream"]
  volumes:
    - name: dind-socket
      emptyDir: {}