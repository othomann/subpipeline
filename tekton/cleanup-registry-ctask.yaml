apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup-registry-ctask
spec:
  stepTemplate:
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: REGISTRY_NAMESPACE
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGISTRY_NAMESPACE
      - name: OPTIONS
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: OPTIONS
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
  workspaces:
  - name: output
    mountPath: /workspace
  steps:
  - name: cleanup-registry
    image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.32
    imagePullPolicy: IfNotPresent
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - |
        #!/usr/bin/env bash

        function ibmcloud_login() {
          # 1 - API KEY
          # 2 - REGION
          # 3 - API (optional)
          set +e
          for iteration in {1..30}
          do
              echo "Logging in IBM cloud: $iteration / 30"
              if [ "$#" -eq 3 ]; then
                  if ibmcloud login --apikey "${1}" -r "${2}" -a "${3}"; then
                      return 0
                  else
                      echo "ibmcloud login failed. Trying again..."
                      sleep 5
                  fi

              else
                  if ibmcloud login --apikey "${1}" -r "${2}" ; then
                      return 0
                  else
                      echo "ibmcloud login failed. Trying again..."
                      sleep 5
                  fi

              fi

          done
          return 1
        }

        if ! ibmcloud_login "${API_KEY}" "${REGION}" "${API}"; then
          echo "Failed to login into ibm cloud"
          return 1
        fi

        ibmcloud plugin update --all --f

        ibmcloud cr region-set "${REGION}"
        ibmcloud cr login
        
        # Walk all images in namespace $REGISTRY_NAMESPACE in reverse chronological order,
        # keep all images more recent than the given TIMESTAMP (default is 367 days ago)
        # and delete the older ones

        # Ensure REGISTRY_NAMESPACE and IMAGE_NAME are set
        if [ -z "$REGISTRY_NAMESPACE" ]; then
            echo "Missing REGISTRY_NAMESPACE variable"
            echo "Usage:"
            echo "export REGISTRY_NAMESPACE=opentoolchain"
            echo ". cleanup_images.sh [-delete]"
            exit 1
        fi

        # By default keep all images that are newer than 367 days ago
        if [ -z "$TIMESTAMP" ]; then
            if [[ "$OSTYPE" == 'darwin'* ]]; then
                TIMESTAMP=$(date -v-367d -u +%s)
            else
                TIMESTAMP=$(date --date="367 days ago" +"%s")
            fi
        fi

        if [[ "$OSTYPE" == 'darwin'* ]]; then
            echo "Deleting images for namespace ${REGISTRY_NAMESPACE}, keep all images newer than $(date -r "$TIMESTAMP" -u)"
        else
            echo "Deleting images for namespace ${REGISTRY_NAMESPACE}, keep all images newer than $(date --date="@$TIMESTAMP")"
        fi

        if ! ibmcloud cr namespaces | grep "$REGISTRY_NAMESPACE"; then
          echo "$REGISTRY_NAMESPACE doesn't exist on this account and this region $REGION"
          exit 1
        fi

        if [ "$OPTIONS" != "-delete" ]; then
            echo "-delete flag not set, this will simulate the deletion"
        fi

        # Get images for component and sort them most recent first
        #LIST=$(ibmcloud cr images --restrict "${REGISTRY_NAMESPACE}" --no-trunc --format '{{ .Created }} {{ .Repository }}:{{ .Tag }}' | sort -r -u)
        LIST=$(ibmcloud cr digests --restrict ${REGISTRY_NAMESPACE} --format '{{ if (lt .Created '$TIMESTAMP')}}{{.Created}} {{.Repository}}@{{.Digest}}{{end}}' | sort -r -u)
        echo " "
        echo "List of images for ${REGISTRY_NAMESPACE}"
        echo "$LIST"

        #echo " "
        #echo "######### Debugging #############"
        # echo "REGISTRY_NAMESPACE:$REGISTRY_NAMESPACE"
        # echo "TIMESTAMP:$TIMESTAMP"
        #echo "######### End debugging #########"

        # Delete images that are older than $TIMESTAMP
        echo " "
        echo "Processing images..."
        DELETE=0
        KEEP=0
        while read -r line
        do
            if [ -z "$line" ]; then
                continue;
            fi
            CURRENT_TIMESTAMP=$(echo "$line" | awk '{print $1};')
            IMAGE_URL=$(echo "$line" | awk '{print $2};')
            if [ "$CURRENT_TIMESTAMP" -gt "$TIMESTAMP" ]; then
                echo "Keeping image $IMAGE_URL"
                KEEP=$((KEEP + 1))
            else
                if [ "$OPTIONS" != "-delete" ]; then
                    echo "(simulate) ibmcloud cr image-rm $IMAGE_URL"
                else
                    ibmcloud cr image-rm "$IMAGE_URL"
                fi
                DELETE=$((DELETE + 1))
            fi
        done <<< "$LIST"

        echo "Retained $KEEP images"
        echo "Removed $DELETE images"
