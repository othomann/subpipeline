apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-containerize
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: containerize-image
      description: image to use for the fetch-gitoken step (default to icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.9)
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.9"
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: container-registry-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: registry-region
      description: container registry region id. required if no image-url or no image pipeline resources provided
      default: ""
    - name: region
      description: IBMCloud Region
      default: ""
    - name: registry-namespace
      description: container registry namespace. required if no image-url or no image pipeline resources provided
      default: ""
    - name: image-name
      description: image name. required if no image-url or no image pipeline resources provided
      default: ""
    - name: branch
      description: Git Branch
      default: ""
    - name: path-to-context
      default: "."
    - name: path-to-dockerfile
      default: "."
    - name: dockerfile
      default: "Dockerfile"
    - name: docker-client-image
      description: The Docker image to use to run the Docker client
      default: docker
    - name: dind-image
      description: image to use for the Docker-in-Docker sidecar (default to icr.io/continuous-delivery/pipeline/docker:19.03.15-dind)
      default: "docker:dind"
  results:
    - name: image-repository
      description: Image Repo
    - name: image-tags
      description: Image Tags
    - name: image-digest
      description: Image Digest
  workspaces:
    - name: source
      description: A workspace backing by a volume
      mountPath: /artifacts
  steps:
    - name: check-registry
      image: $(params.containerize-image)
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.container-registry-apikey-secret-key)
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: REGISTRY_NAMESPACE
          value: $(params.registry-namespace)
        - name: WORKSPACE_PATH
          value: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e -o pipefail

        ibmcloud config --check-version false
        ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
        SC=$?
        if [ $SC -gt 0 ]; then
          echo -e "Failed to login to ibmcloud"
          exit 1
        fi
        echo -e "Successfully logged into ibmcloud\n"

        NS=$(ibmcloud cr namespaces)
        if [[ $NS =~ "${REGISTRY_NAMESPACE}" ]]; 
          then
            echo "Namespace ok"
          else 
            echo "Namespace not found"
            exit 1
        fi

        echo "WORKSPACE_PATH=${WORKSPACE_PATH}"

    - name: run-docker-commands
      image: $(params.docker-client-image)
      workingDir: $(workspaces.source.path)
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.container-registry-apikey-secret-key)
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: REGISTRY_REGION
          value: $(params.registry-region)
        - name: IMAGE_NAME
          value: $(params.image-name)
        - name: GIT_BRANCH
          value: $(params.branch)
        - name: PATH_TO_DOCKERFILE
          value: $(params.path-to-dockerfile)
        - name: PATH_TO_CONTEXT
          value: $(params.path-to-context)
        - name: DOCKERFILE
          value: $(params.dockerfile)
        - name: REGISTRY_NAMESPACE
          value: $(params.registry-namespace)
        - name: DOCKER_HOST
          value: tcp://localhost:2376
        - name: DOCKER_TLS_VERIFY
          value: '1'
        - name: DOCKER_CERT_PATH
          value: /certs/client
      command: ["/bin/sh", "-c"]
      args:
        - |
          set -e -o pipefail
          # ls
          # echo "jed23"
          IMAGE_URL=${REGISTRY_REGION}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}
          IMAGE_TAG=${BUILD_NUMBER}-${GIT_BRANCH}-${PIPELINE_RUN_ID}
          echo "$IMAGE_URL:$IMAGE_TAG"

          # echo "DOCKER_HOST=${DOCKER_HOST}"
          # echo "DOCKER_TLS_VERIFY=${DOCKER_TLS_VERIFY}"
          # echo "DOCKER_CERT_PATH=${DOCKER_CERT_PATH}"

          docker build --tag "$IMAGE_URL:$IMAGE_TAG" --file $PATH_TO_DOCKERFILE/$DOCKERFILE $PATH_TO_CONTEXT
          
          apk add curl
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud config --check-version false
          ibmcloud plugin install cr

          ibmcloud config --check-version false
          ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
          SC=$?
          if [ $SC -gt 0 ]; then
            echo -e "Failed to login to ibmcloud"
            exit 1
          fi
          echo -e "Successfully logged into ibmcloud\n"
          ibmcloud cr login --client docker
          
          docker push ${IMAGE_URL}:${IMAGE_TAG}

          MANIFEST_SHA=$(docker inspect "$IMAGE_URL:$IMAGE_TAG" --format='{{index .RepoDigests 0 }}' | awk -F@ '{print $2}')
          echo "$MANIFEST_SHA"

          # Record task results
          echo -n "${IMAGE_URL}" > $(results.image-repository.path)
          echo -n "${IMAGE_TAG}" > $(results.image-tags.path)
          echo -n "${MANIFEST_SHA}" > $(results.image-digest.path)

          echo "Done."
      volumeMounts:
      - mountPath: /certs/client
        name: dind-certs 
  sidecars:
    - name: server
      image: $(params.dind-image)
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      args:
        # Set the MTU to a value that is containable in the ibmcloud calico mtu value
        # References:
        # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5
        # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu
        #
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
        - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then
            apk add e2fsprogs &&
            truncate -s 20G /tmp/disk.img &&
            mkfs.ext4 /tmp/disk.img &&
            mount /tmp/disk.img /var/lib/docker; fi &&
          dockerd-entrypoint.sh --mtu=1400;
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        initialDelaySeconds: 2
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: dind-certs
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
    - name: check-registry-scripts
      configMap:
        name: check-registry-scripts
        items:
          - key: check_registry.sh
            path: check_registry.sh
          - key: parse_image_url.sh
            path: parse_image_url.sh
    - name: environment-properties
      configMap:
        name: environment-properties
    - name: secure-properties
      secret:
        secretName: secure-properties
