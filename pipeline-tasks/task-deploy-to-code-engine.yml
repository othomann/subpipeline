apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-to-code-engine
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: app-name
      description: name of the Code Engine application
    - name: code-engine-project
      description: name of the Code Engine project
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
    - name: task-image
      description: image used to execute this task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.9"
    - name: region
      description: IBMCloud Region
      default: ""
    - name: shuttle-properties-file
      description: name of the properties file that contain properties to include in the environment
      default: "build.properties"
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: deployment-type
      description:  Specifies the type of deployment. Valid values are 'application' and 'job'. 
      default: "application"
    - name: image-repository
      description: the repository for the built image
    - name: image-tags
      description: the tags for the built image
    - name: registry-secret-name
      description: registry secret name
    - name: port
      description: port where the application is listening
      default: "http1:8080"
    - name: visibility
      description: public or private or project
      default: "public"
    - name: min-scale
      description: minimum scale of the Code Engine application
      default: "0"
    - name: max-scale
      description: maximum scale of the Code Engine application
      default: "1"
    - name: memory
      description: total memory of the Code Engine application
      default: "1G"
    - name: cpu
      description: number of vCPU of the Code Engine application
      default: "1"
    - name: concurrency
      description: The maximum number of requests that can be processed concurrently per instance.
      default: "100"
    - name: concurrency-target
      description: The threshold of concurrent requests per instance at which one or more additional instances are created.
      default: "100"
    - name: request-timeout
      description: The amount of time that is allowed for a running application to respond to a request.
      default: "300"
    - name: wait-timeout
      description: The length of time in seconds to wait for the application to be ready.
      default: "600"
    - name: maxexecutiontime
      description: The maximum execution time in seconds for runs of the job. 
      default: "7200"
    - name: app-env
      description: The maximum execution time in seconds for runs of the job. 
      default: ""
    - name: mode
      description: task or daemon
      default: "task"
    - name: retrylimit
      description: retry limit
      default: "3"
    - name: instances
      description: retry limit
      default: "1"
    - name: cluster-local
      description: retry limit
      default: "false"
  results:
    - name: app-url
      description: The running application's URL (obtained from APP_URL variable set by the executed script)
  workspaces:
    - name: artifacts
      description: A workspace
      mountPath: /artifacts
  steps:
    - name: execute
      image: $(params.task-image)
      workingDir: /artifacts
      env:
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
        - name: SHUTTLE_PROPERTIES_FILE
          value: $(params.shuttle-properties-file)
        - name: CODE_ENGINE_PROJECT
          value: $(params.code-engine-project)
      script: |
        #!/bin/bash
        set -e -o pipefail

        if [ $(params.pipeline-debug) == 1 ]; then
            env
            pwd
            ls -l
            echo "=== cat /artifacts/_toolchain.json ==="
            cat /artifacts/_toolchain.json
            echo ""
            echo "======================================"
            trap env EXIT
            set -x
        fi

        # SETUP BEGIN
        ibmcloud config --check-version false
        ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
        SC=$?
        if [ $SC -gt 0 ]; then
            echo -e "Failed to login to ibmcloud"
            exit 1
        fi
        echo -e "Successfully logged into ibmcloud\n"

        echo "Loading CE project"
        ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

        if [[ "$(params.deployment-type)" == "application" ]]; then

          ### CODE ENGINE APPLICATION ###
          echo "Deploying your code as Code Engine application...."

          if ibmcloud ce app get -n $(params.app-name) | grep Age; then
            echo "Code Engine app with name $(params.app-name) found, updating it"

            CMD="ibmcloud ce app update \
            --name $(params.app-name) \
            --image $(params.image-repository):$(params.image-tags) \
            --registry-secret $(params.registry-secret-name) \
            --port $(params.port) \
            --visibility $(params.visibility) \
            --cluster-local=$(params.cluster-local) \
            --min-scale $(params.min-scale) \
            --max-scale $(params.max-scale) \
            --cpu $(params.cpu) \
            --memory $(params.memory) \
            --concurrency $(params.concurrency)  \
            --concurrency-target $(params.concurrency-target)  \
            --wait-timeout $(params.wait-timeout)  \
            --request-timeout $(params.request-timeout)"

            if [ "$(params.app-env)" == "" ]; then
              echo "No app env"
            else
              echo "adding app env"
              CMD="${CMD} $(params.app-env)"
            fi

            echo "${CMD}"
            eval "$CMD"


            # END OF UPDATE APP

          else
            echo "Code Engine app with name $(params.app-name) not found, creating it"

            CMD="ibmcloud ce app create \
            --name $(params.app-name) \
            --image $(params.image-repository):$(params.image-tags) \
            --registry-secret $(params.registry-secret-name) \
            --port $(params.port) \
            --visibility $(params.visibility) \
            --cluster-local=$(params.cluster-local) \
            --min-scale $(params.min-scale) \
            --max-scale $(params.max-scale) \
            --cpu $(params.cpu) \
            --memory $(params.memory) \
            --concurrency $(params.concurrency)  \
            --concurrency-target $(params.concurrency-target)  \
            --wait-timeout $(params.wait-timeout)  \
            --request-timeout $(params.request-timeout)"

            if [ "$(params.app-env)" == "" ]; then
              echo "No app env"
            else
              echo "adding app env"
              CMD="${CMD} $(params.app-env)"
            fi

            echo "${CMD}"
            eval "$CMD"

            #END OF CREATE APP

          fi

            APPLICATION_URL=$(ibmcloud ce application get -n $(params.app-name) -o url)
            echo "APPLICATION_URL=${APPLICATION_URL}"

            # Record task results
            echo -n "$APPLICATION_URL" >$(results.app-url.path)

        else

          ### CODE ENGINE JOB ###
          echo "Deploying your code as Code Engine job......"

          if ibmcloud ce job get --name $(params.app-name); then
            echo "Code Engine job with name $(params.app-name) found, updating it"

            CMD="ibmcloud ce job update \
            --name $(params.app-name) \
            --image $(params.image-repository):$(params.image-tags) \
            --registry-secret $(params.registry-secret-name) \
            --instances $(params.instances) \
            --cpu $(params.cpu) \
            --memory $(params.memory) \
            --mode $(params.mode) \
            --retrylimit $(params.retrylimit) \
            --maxexecutiontime $(params.maxexecutiontime)"

            if [ "$(params.app-env)" == "" ]; then
              echo "No app env"
            else
              echo "adding app env"
              CMD="${CMD} $(params.app-env)"
            fi

            echo "${CMD}"
            eval "$CMD"



            #END OF UPDATE JOB
          else
            echo "Code Engine job with name $(params.app-name) not found, creating it"

            CMD="ibmcloud ce job create \
            --name $(params.app-name) \
            --image $(params.image-repository):$(params.image-tags) \
            --registry-secret $(params.registry-secret-name) \
            --instances $(params.instances) \
            --cpu $(params.cpu) \
            --memory $(params.memory) \
            --mode $(params.mode) \
            --retrylimit $(params.retrylimit) \
            --maxexecutiontime $(params.maxexecutiontime)"

            if [ "$(params.app-env)" == "" ]; then
              echo "No app env"
            else
              echo "adding app env"
              CMD="${CMD} $(params.app-env)"
            fi

            echo "${CMD}"
            eval "$CMD"

            #END OF CREATE JOB 
          fi

            # Record task results
            echo -n "Code Engine Job created/updated" >$(results.app-url.path)

        fi

      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /artifacts/_toolchain.json
          subPath: toolchain.json
          name: cd-config-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
