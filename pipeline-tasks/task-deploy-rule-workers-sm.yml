apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-rules-to-code-engine-sm
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: app-name
      description: name of the Code Engine application
    - name: code-engine-project
      description: name of the Code Engine project
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
    - name: task-image
      description: image used to execute this task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.9"
    - name: region
      description: IBMCloud Region
      default: ""
    - name: shuttle-properties-file
      description: name of the properties file that contain properties to include in the environment
      default: "build.properties"
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: deployment-type
      description:  Specifies the type of deployment. Valid values are 'application' and 'job'. 
      default: "application"
    - name: image-repository
      description: the repository for the built image
    - name: image-tags
      description: the tags for the built image
    - name: registry-secret-name
      description: registry secret name
    - name: port
      description: port where the application is listening
      default: "http1:8080"
    - name: visibility
      description: public or private or project
      default: "public"
    - name: min-scale
      description: minimum scale of the Code Engine application
      default: "0"
    - name: max-scale
      description: maximum scale of the Code Engine application
      default: "1"
    - name: memory
      description: total memory of the Code Engine application
      default: "1G"
    - name: cpu
      description: number of vCPU of the Code Engine application
      default: "1"
    - name: concurrency
      description: The maximum number of requests that can be processed concurrently per instance.
      default: "100"
    - name: concurrency-target
      description: The threshold of concurrent requests per instance at which one or more additional instances are created.
      default: "100"
    - name: request-timeout
      description: The amount of time that is allowed for a running application to respond to a request.
      default: "300"
    - name: wait-timeout
      description: The length of time in seconds to wait for the application to be ready.
      default: "600"
    - name: maxexecutiontime
      description: The maximum execution time in seconds for runs of the job. 
      default: "7200"
    - name: app-env
      description: The maximum execution time in seconds for runs of the job. 
      default: ""
    - name: mode
      description: task or daemon
      default: "task"
    - name: retrylimit
      description: retry limit
      default: "3"
    - name: instances
      description: retry limit
      default: "1"
    - name: cluster-local
      description: retry limit
      default: "false"
  results:
    - name: app-url
      description: The running application's URL (obtained from APP_URL variable set by the executed script)
  workspaces:
    - name: artifacts
      description: A workspace
      mountPath: /artifacts
  steps:
  - name: deploy-re-sm20-1
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-c2aff858-sm20-1"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-1 \
      --env RULE_ID=c2aff858-5df1-4a4d-9626-8d67e046bfb3 \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume
  - name: deploy-re-sm20-2
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-e90771a7-sm20-2"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-2 \
      --env RULE_ID=e90771a7-5f25-4c16-8ea3-d9dae410058a \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-3
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-6650fe30-sm20-3"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-3 \
      --env RULE_ID=6650fe30-225c-4b1d-8f13-ba7652872b1d \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-4
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-dc78d947-sm20-4"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-4 \
      --env RULE_ID=dc78d947-3013-46d0-8357-962929802d0c \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-5
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-2632810d-sm20-5"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-5 \
      --env RULE_ID=2632810d-5e8f-451f-8ac4-8998188b836f \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-6
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-6944f167-sm20-6"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-6 \
      --env RULE_ID=6944f167-5b09-49d0-a332-987a589da90e \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-7
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-6ea2fede-sm20-7"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-7 \
      --env RULE_ID=6ea2fede-1cf2-4ba9-9e6d-da3da018008a \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-8
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-80e60c6c-sm20-8"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-8 \
      --env RULE_ID=80e60c6c-0dc4-481c-8a5f-2e791bea0edc \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-9
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-a60fe547-sm20-9"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-9 \
      --env RULE_ID=a60fe547-c2df-41ed-bfa3-904060e3fa48 \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-10
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-5d52f913-sm20-10"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-10 \
      --env RULE_ID=5d52f913-c12a-4007-803f-e792ca13268d \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-11
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-4738b287-sm20-11"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-11 \
      --env RULE_ID=4738b287-1d27-4fda-a8a4-a3bcbe063f67 \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-12
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-f9f14869-sm20-12"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-12 \
      --env RULE_ID=f9f14869-81f3-4fed-9edf-3493ccb0a250 \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-13
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-44b1e69c-sm20-13"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-13 \
      --env RULE_ID=44b1e69c-2ff3-4961-a7c8-acf63f706dbd \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-14
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-8b20b7b8-sm20-14"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-14 \
      --env RULE_ID=8b20b7b8-677e-4862-8f85-d10bf7e75aae \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-15
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-10d32e2b-sm20-15"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-15 \
      --env RULE_ID=10d32e2b-132f-48c4-9e5b-537a46774062 \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20-16
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20-130e20e5-sm20-16"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20-16 \
      --env RULE_ID=130e20e5-1ade-4db2-8967-6b0ed30eb15d \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20mx-1
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20mx-e33957e2-sm20mx-1"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20mx-1 \
      --env RULE_ID=e33957e2-597b-4ae4-95b8-3fd0e94cd799 \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm20mx-2
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm20mx-193401d4-sm20mx-2"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm20mx-2 \
      --env RULE_ID=193401d4-73a0-4f0a-a9b5-3e69883c7594 \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm50-1
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm50-6410d348-sm50-1"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm50-1 \
      --env RULE_ID=6410d348-583b-4aa7-999b-76d3163c7c1c \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm50-2
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm50-773524dc-sm50-2"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm50-2 \
      --env RULE_ID=773524dc-ca5a-44a2-ad70-98f4ac928806 \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm5-1
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm5-cc4c458f-sm5-1"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm5-1 \
      --env RULE_ID=cc4c458f-45cc-4e12-be5a-e21e5318736a \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-sm5-2
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-sm5-dbb370bf-sm5-2"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-sm5-2 \
      --env RULE_ID=dbb370bf-b924-4c21-bb8f-879a64d299a2 \
      --env REDIS_DB=6" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume













  

  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json


