apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-rules-to-code-engine-wth
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: app-name
      description: name of the Code Engine application
    - name: code-engine-project
      description: name of the Code Engine project
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
    - name: task-image
      description: image used to execute this task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.9"
    - name: region
      description: IBMCloud Region
      default: ""
    - name: shuttle-properties-file
      description: name of the properties file that contain properties to include in the environment
      default: "build.properties"
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: deployment-type
      description:  Specifies the type of deployment. Valid values are 'application' and 'job'. 
      default: "application"
    - name: image-repository
      description: the repository for the built image
    - name: image-tags
      description: the tags for the built image
    - name: registry-secret-name
      description: registry secret name
    - name: port
      description: port where the application is listening
      default: "http1:8080"
    - name: visibility
      description: public or private or project
      default: "public"
    - name: min-scale
      description: minimum scale of the Code Engine application
      default: "0"
    - name: max-scale
      description: maximum scale of the Code Engine application
      default: "1"
    - name: memory
      description: total memory of the Code Engine application
      default: "1G"
    - name: cpu
      description: number of vCPU of the Code Engine application
      default: "1"
    - name: concurrency
      description: The maximum number of requests that can be processed concurrently per instance.
      default: "100"
    - name: concurrency-target
      description: The threshold of concurrent requests per instance at which one or more additional instances are created.
      default: "100"
    - name: request-timeout
      description: The amount of time that is allowed for a running application to respond to a request.
      default: "300"
    - name: wait-timeout
      description: The length of time in seconds to wait for the application to be ready.
      default: "600"
    - name: maxexecutiontime
      description: The maximum execution time in seconds for runs of the job. 
      default: "7200"
    - name: app-env
      description: The maximum execution time in seconds for runs of the job. 
      default: ""
    - name: mode
      description: task or daemon
      default: "task"
    - name: retrylimit
      description: retry limit
      default: "3"
    - name: instances
      description: retry limit
      default: "1"
    - name: cluster-local
      description: retry limit
      default: "false"
  results:
    - name: app-url
      description: The running application's URL (obtained from APP_URL variable set by the executed script)
  workspaces:
    - name: artifacts
      description: A workspace
      mountPath: /artifacts
  steps:
  - name: deploy-re-wth-1
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-52b9b5a2-wth-1"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-1 \
      --env RULE_ID=52b9b5a2-5115-4e06-855b-7e07546f6c37 \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-wth-2
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-02a5f5a0-wth-2"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-2 \
      --env RULE_ID=02a5f5a0-27a9-426d-94ed-d34026da83d2 \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-wth-3
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-f04c157d-wth-3"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-3 \
      --env RULE_ID=f04c157d-7a1e-46fd-a829-d54174ca59bf \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-wth-4
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-803242b4-wth-4"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-4 \
      --env RULE_ID=803242b4-8d7d-4927-8831-72f5a133e342 \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-wth-5
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-c9332e1e-wth-5"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-5 \
      --env RULE_ID=c9332e1e-c307-45af-b98d-479c3b4e7559 \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-wth-6
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-bf699df9-wth-6"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-6 \
      --env RULE_ID=bf699df9-59b5-4a23-9dfd-d4bd7cf63bf6 \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-wth-7
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-b5447a21-wth-7"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-7 \
      --env RULE_ID=b5447a21-c0bc-4946-b56e-d906c40b6376 \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-wth-8
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-17f3efce-wth-8"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-8 \
      --env RULE_ID=17f3efce-6a42-426d-a94b-0532b046b7a4 \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-wth-9
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-4275e519-wth-9"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-9 \
      --env RULE_ID=4275e519-9044-41c0-bf48-b8792a037855 \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-wth-10
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-f528a4c8-wth-10"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-10 \
      --env RULE_ID=f528a4c8-9690-4864-a818-7e104d532261 \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-wth-11
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-83eba566-wth-11"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-11 \
      --env RULE_ID=83eba566-da49-4327-9abf-4cbbd16626b0 \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume


  - name: deploy-re-wth-12
    image: $(params.task-image)
    workingDir: /artifacts
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CODE_ENGINE_PROJECT
        value: $(params.code-engine-project)
    script: |
      #!/bin/bash
      set -e -o pipefail

      if [ $(params.pipeline-debug) == 1 ]; then
        env
        pwd
        ls -l
        echo "=== cat /artifacts/_toolchain.json ==="
        cat /artifacts/_toolchain.json
        echo ""
        echo "======================================"
        trap env EXIT
        set -x
      fi

      # SETUP BEGIN
      ibmcloud config --check-version false
      ibmcloud login -a $(params.ibmcloud-api) -r $(params.region) -g $(params.resource-group)  --apikey ${API_KEY}
      SC=$?
      if [ $SC -gt 0 ]; then
        echo -e "Failed to login to ibmcloud"
        exit 1
      fi
      echo "Successfully logged into ibmcloud"

      echo "Loading CE project"
      ibmcloud ce project select -n ${CODE_ENGINE_PROJECT}

      echo "Deploying your code as Code Engine application...."
      APP_NAME="rules-wth-64d35679-wth-12"
      CMD="ibmcloud ce app"

      if ibmcloud ce app get -n ${APP_NAME} | grep Age; then
        echo "Code Engine app with name ${APP_NAME} found, updating it"
        CMD="${CMD} update"
      else
        echo "Code Engine app with name ${APP_NAME} not found, creating it"
        CMD="${CMD} create"
      fi

      CMD="${CMD} \
      --name ${APP_NAME} \
      --image $(params.image-repository):$(params.image-tags) \
      --registry-secret $(params.registry-secret-name) \
      --port $(params.port) \
      --visibility $(params.visibility) \
      --cluster-local=$(params.cluster-local) \
      --min-scale $(params.min-scale) \
      --max-scale $(params.max-scale) \
      --cpu $(params.cpu) \
      --memory $(params.memory) \
      --concurrency $(params.concurrency)  \
      --concurrency-target $(params.concurrency-target)  \
      --wait-timeout $(params.wait-timeout) \
      --request-timeout $(params.request-timeout) \
      --env QUEUE_QUEUE=re-wth-12 \
      --env RULE_ID=64d35679-26ea-4fba-a585-91cc832b2e5a \
      --env REDIS_DB=5" \

      if [ "$(params.app-env)" == "" ]; then
        echo "No app env"
      else
        echo "adding app env"
        CMD="${CMD} $(params.app-env)"
      fi

      echo "${CMD}"
      eval "$CMD"

      APPLICATION_URL=$(ibmcloud ce application get -n ${APP_NAME} -o url)
      echo "APPLICATION_URL=${APPLICATION_URL}"

      # Record task results
      echo -n "$APPLICATION_URL" >$(results.app-url.path)

    volumeMounts:
      - mountPath: /cd-config
        name: cd-config-volume
      - mountPath: /steps
        name: steps-volume
      - mountPath: /artifacts/_toolchain.json
        subPath: toolchain.json
        name: cd-config-volume





  

  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json


